基于esp-adf (da1dabc1d3c039758c00bf1d4f1c3c5326e75c0c)修改：

1、
$diff i2s_stream.c i2s_stream_old.c -b -B > i2s_stream_diff.txt
358,363d357
< 	//modify by li begin 2019/11/13
<     if(i2s_driver_install(i2s->config.i2s_port, &i2s->config.i2s_config, 0, NULL) != ESP_OK){ 	
< 		audio_free(i2s);
<         return NULL;	
< 	}
< 	//modify by li end   2019/11/13



2、
$diff spiffs_stream.c spiffs_stream_old.c -b -B > spiffs_stream_diff.txt
94,95c94
<     //char *path = strstr(uri, "/spiffs");	//modify by li  2019/11/13
< 	char *path = strstr(uri, "/userdata");	//modify by li  2019/11/13
---
>     char *path = strstr(uri, "/spiffs");



3、
$diff wifi_service.c wifi_service_old.c -b -B > wifi_service_diff.txt
41,43d40
< //mod by li begin 20191017
< extern QueueHandle_t app_wifi_serv_queue;
< //mod by li end 20191017
208d204
<     wifi_sta_setup(pvParameters);
210,223c206,209
<     wifi_task_msg_t wifi_msg = {0};
<     bool task_run = true;
<     periph_service_event_t cb_evt = {0};
<     wifi_setting_item_t *item;
<     memset(&serv->info, 0x00, sizeof(wifi_config_t));
<     if (ESP_OK == esp_wifi_get_config(WIFI_IF_STA, &serv->info)) {
<         if (serv->info.sta.ssid[0] != 0) {
<             printf("Connect to stored Wi-Fi SSID:%s PWD:%s\n", serv->info.sta.ssid,serv->info.sta.password);//mod by li 20191101
<         }else{
< 			ESP_LOGW(TAG, "No wifi SSID stored!");
< 			//mod by li begin 20191017
< 			uint32_t senddata = 3;//APP_WIFI_SERV_RECONNECTEDFAILED = 3; tell app_wifi_task to start airkiss
< 			xQueueSend(app_wifi_serv_queue,&senddata,0);
< 			//mod bu li begin 20191017
---
>     wifi_config_t wifi_cfg = {0};
>     if (ESP_OK == esp_wifi_get_config(WIFI_IF_STA, &wifi_cfg)) {
>         if (wifi_cfg.sta.ssid[0] != 0) {
>             ESP_LOGI(TAG, "Connect to stored Wi-Fi SSID:%s", wifi_cfg.sta.ssid);
228c214,220
<     configure_wifi_sta_mode(&serv->info);
---
>     wifi_task_msg_t wifi_msg = {0};
>     bool task_run = true;
>     periph_service_event_t cb_evt = {0};
>     wifi_setting_item_t *item;
> 
>     wifi_sta_setup(pvParameters);
>     configure_wifi_sta_mode(&wifi_cfg);
253c245
<                 ESP_LOGD(TAG, "STATE type:%d, pdata:%p, len:%d", wifi_msg.type, wifi_msg.pdata, wifi_msg.len);
---
>                 ESP_LOGW(TAG, "STATE type:%d, pdata:%p, len:%d", wifi_msg.type, wifi_msg.pdata, wifi_msg.len);
281c273
<                         if (serv->retry_times < 1) {
---
>                         if (serv->retry_times < 10) {
287d278
< 							serv->retry_times = 0;
289,292d279
< 							//mod by li begin 20191017
< 							uint32_t senddata = 3;//APP_WIFI_SERV_RECONNECTEDFAILED = 3; tell app_wifi_task to start airkiss
< 							xQueueSend(app_wifi_serv_queue,&senddata,0);
< 							//mod by li end 20191017
294,295c281
< 						ESP_LOGI(TAG, "Connect to  Wi-Fi SSID:%s PWD:%s", serv->info.sta.ssid,serv->info.sta.password);//mod by li 20191115
<                         ESP_LOGW(TAG, "Disconnect reason %d.\nReason code:\t0:STA_UNKNOWN,1:AUTH_ERROR,2:AP_NOT_FOUND,3:BY_USER", serv->reason);
---
>                         ESP_LOGW(TAG, "Disconnect reason %d", serv->reason);
302,307c288,290
<                     ESP_LOGI(TAG, "WIFI_SERV_CMD_CONNECT.");
< 					//modify by li begin 20191116
< 					extern uint8_t app_wifi_state;
< 					app_wifi_state = 2;//CONNECTING;
< 					//modify by li end 20191116
<                     configure_wifi_sta_mode(&serv->info);
---
>                     ESP_LOGI(TAG, "WIFI_SERV_CMD_CONNECT");
>                     memcpy(&wifi_cfg, &serv->info, sizeof(wifi_config_t));
>                     configure_wifi_sta_mode(&wifi_cfg);
435d417
<     wifi_serv_cmd_send(serv->wifi_serv_que, WIFI_SERV_CMD_CONNECT, 0, 0, 0);
